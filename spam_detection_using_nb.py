# -*- coding: utf-8 -*-
"""spam_detection_using_NB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BZDzedgE06xV__GGcXKU6mzYpNA627W5
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

df = pd.read_csv('spam_ham_dataset.csv')

df

df_balanced = df.drop_duplicates(subset='text')
df_balanced

sampled_df = df.groupby("label").apply(lambda x: x.sample(n=200, random_state=42)).reset_index(drop=True)

sampled_df

sampled_df['label'].value_counts()

df= sampled_df.drop('label', axis=1)

df

df.head()

# Check for missing values
print(df.isnull().sum())

# Drop rows with missing data (if any)
df.dropna(inplace=True)

df = df.drop(['Unnamed: 0'], axis=1)

X = df['text']         # input (emails)
y = df['label_num']    # target (0 = not spam, 1 = spam)

# Step 6: Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#Text vectorization
vectorizer = CountVectorizer() #Converts text data into numeric form using Bag of Words model.
X_train_vec = vectorizer.fit_transform(X_train) #fit_transform on training set: learns vocabulary & transforms text.
X_test_vec = vectorizer.transform(X_test) #transform on test set: applies the same vocabulary.

model = MultinomialNB() # Multinomial Naive Bayes classifier.

model.fit(X_train_vec, y_train)

# Step 9: Evaluate
y_pred = model.predict(X_test_vec)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix
from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

# Take input from user
user_email = input("Enter the email content to check if it's spam: ")

# Vectorize and predict
user_vector = vectorizer.transform([user_email])
prediction = model.predict(user_vector)

# Show result
if prediction[0] == 1:
    print("This email is SPAM.")
else:
    print("This email is NOT SPAM.")



